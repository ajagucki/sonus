#summary Style guide for source code.
#labels Phase-Implementation

= Introduction =

In order to maintain the highest level of consistency across the !PyQt4, Python, and XMMS2 library coding styles, there are a number of conventions that must be followed.


= General Style =

For unmentioned attributes and general style, refer to the '[http://www.python.org/dev/peps/pep-0008/ Style Guide for Python Code].'


= Naming Exceptions =

The following are exceptions to the naming practices outlined in '[http://www.python.org/dev/peps/pep-0008/ Style Guide for Python Code].'

== Function Naming ==

Use [http://en.wikipedia.org/wiki/CamelCase lowerCamelCase] when naming functions. Callback functions should be preceded with a single underscore and succeeded by 'Cb.'

*Examples:*

  {{{
  def getMediaInfo():
      pass

  def _getMediaInfoCb():
      pass
  }}}

== Class Naming ==

Use [http://en.wikipedia.org/wiki/CamelCase UpperCamelCase] when naming classes.

*Example:*

  {{{
  class MlibDialog():
      pass
  }}}

== General Object Naming ==

Use [http://en.wikipedia.org/wiki/CamelCase lowerCamelCase] when naming other objects.

*Example:*

  {{{
  namingConsistency = True
  }}}


= String Literals =

Use single quotes for your string literals unless the string itself contains single quotes.

*Examples:*

  {{{
  stringOne = 'Vampires that stalk Earth on reverse hours.'
  stringTwo = "A head's dread of hallucinogenics in Vietnam."
  }}}


= Docstrings =

Refer and adhere to the '[http://www.python.org/dev/peps/pep-0257/ Docstring Conventions]' from PEP 257.

Separate module docstrings from class docstrings. See the example below.

*Example:*

  {{{
  """
  The supermodel module houses the item model superclass.
  For use with Sonus, a PyQt4 XMMS2 client.
  """

  import othermodules


  class SuperModel(QAbstractTableModel):
      """
      The SuperModel class defines the standard interface that item models must
      use to be able to interoperate with other components in the model/view
      architecture. SuperModel is not supposed to be instantiated directly.
      Instead, you should subclass it to create new models.
      """
  ...
  }}}

The docstring describing the module expands on the module name, while the class 
docstring gives a detailed class description.

  * Future proof when additional attributes are added to modules.
  * It looks good in `pydoc` output.


= Comments =

Refer and adhere to the section on comments in '[http://www.python.org/dev/peps/pep-0008/ Style Guide for Python Code].'